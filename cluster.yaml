# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The maximum number of workers nodes to launch in addition to the head
# node.
max_workers: 8

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
# docker:
#     image: "rayproject/ray:nightly-py38-cpu" # You can change this to latest-cpu if you don't need GPU support and want a faster startup
#     # image: rayproject/ray:latest-gpu   # use this one if you don't need ML dependencies, it's faster to pull
#     container_name: "ray_container"
#     # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
#     # if no cached version is present.
#     pull_before_run: True
#     run_options:   # Extra options to pass into "docker run"
#         - --ulimit nofile=65536:65536

#     # Example of running a GPU head with CPU workers
#     # head_image: "rayproject/ray-ml:latest-gpu"
#     # Allow Ray to automatically detect GPUs

#     # worker_image: "rayproject/ray-ml:latest-cpu"
#     # worker_run_options: []

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-west-1
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes are currently spread between zones by a round-robin approach,
    # however this implementation detail should not be relied upon.
    availability_zone: us-west-1a
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: False # If not present, the default is True.
    security_group:
        GroupName: ray_client_security_group
        IpPermissions:
          - FromPort: 443
            ToPort: 443
            IpProtocol: TCP
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - FromPort: 8265
            ToPort: 8265
            IpProtocol: TCP
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - FromPort: 10001
            ToPort: 10001
            IpProtocol: TCP
            IpRanges:
            - CidrIp: 0.0.0.0/0

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

# Tell the autoscaler the allowed node types and the resources they provide.
# The key is the name of the node type, which is just for debugging purposes.
# The node config specifies the launch config and physical instance type.
available_node_types:
    ray.head.default:
        # The minimum number of worker nodes of this type to launch.
        # This number should be >= 0.
        min_workers: 0
        # The maximum number of worker nodes of this type to launch.
        # This takes precedence over min_workers.
        max_workers: 0
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        resources: {}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: m5.2xlarge
            # You can provision additional disk space with a conf as follows
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 100
            # Additional options in the boto docs.
    ray.worker.default:
        # The minimum number of worker nodes of this type to launch.
        # This number should be >= 0.
        min_workers: 8
        # The maximum number of worker nodes of this type to launch.
        # This takes precedence over min_workers.
        max_workers: 8
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        resources: {}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: m5.2xlarge

# Specify the node type of the head node (as configured above).
head_node_type: ray.head.default

# List of shell commands to run to set up nodes.
setup_commands:
    # Note: if you're developing Ray, you probably want to create a Docker image that
    # has your Ray repo pre-cloned. Then, you can replace the pip installs
    # below with a git checkout <your_sha> (and possibly a recompile).
    # To run the nightly version of ray (as opposed to the latest), either use a rayproject docker image
    # that has the "nightly" (e.g. "rayproject/ray-ml:nightly-gpu") or uncomment the following line:
    - pip install "ray[tune]"
    - pip install -U "ray[default] @ https://s3-us-west-2.amazonaws.com/ray-wheels/master/473740b739526563445fa6c292f7d5103eb6599f/ray-2.0.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl"
    - pip install -U git+https://github.com/ray-project/xgboost_ray.git tqdm scikit-learn fastapi uvicorn fsspec s3fs
    - rm -rf lightgbm_ray && git clone https://github.com/ray-project/lightgbm_ray.git && python lightgbm_ray/lightgbm_ray/tests/release/create_learnable_data.py ~/data/classification.parquet --seed 1234 --num-rows 10000000 --num-cols 40 --num-partitions 100 --num-classes 2

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ray start --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
